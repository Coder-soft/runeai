import customtkinter as ctk
import requests, webbrowser, os, subprocess, threading, speedtest, psutil, GPUtil
import tkinter as tk
from tkinter import filedialog
from PIL import ImageGrab
import re
import wmi
import cv2
import sounddevice as sd
import numpy as np
from html import unescape

def handle_unrecognized_command(command):
    return chat_with_gemini(command)

import google.generativeai as genai

genai.configure(api_key="AIzaSyDFMewub97IEuO9wSRVzkPSsWlHM4r5tkk")
model = genai.GenerativeModel("gemini-1.5-flash")

# Custom knowledge base
custom_knowledge = {
    "project_info": "This is a Python-based system controller that can manage systems with simple commands and has AI chat capabilities.",
    "creator": "The creator of this project is Coder-Soft AKA Ebad Ahmed.",
    "features": "Key features include file downloads, web searches, system control (volume, brightness, WiFi), and weather information.",
    "usage": "Users can interact with the system using text commands or chat with the AI for assistance.",
    # Add more key-value pairs for additional knowledge
}

def chat_with_gemini(prompt):
    try:
        context = "You are an AI assistant with the following additional knowledge:\n"
        for key, value in custom_knowledge.items():
            context += f"- {key.capitalize()}: {value}\n"
        
        context += "\nPlease use this information when relevant to answer the following question or command:\n"
        
        full_prompt = context + prompt
        
        response = model.generate_content(full_prompt)
        return response.text
    except Exception as e:
        return f"Error chatting with Rune AI: {str(e)}"

def process_command(command):
    command = command.lower()
    if command.startswith("download "):
        url = command.split("download ")[-1]
        return download_file(url)
    elif command.startswith("search "):
        query = command.split("search ")[-1]
        return search_web(query)
    elif command.startswith("uninstall "):
        app_name = command.split("uninstall ")[-1]
        return uninstall_app(app_name)
    elif command.startswith("open "):
        resource = command.split("open ")[-1]
        return open_resource(resource)
    elif command.startswith("volume "):
        level = int(command.split("volume ")[-1])
        return adjust_volume(level)
    elif command.startswith("brightness "):
        level = int(command.split("brightness ")[-1])
        return adjust_brightness(level)
    elif command.startswith("wifi "):
        state = command.split("wifi ")[-1]
        return toggle_wifi(state)
    elif command.startswith("weather "):
        city_name = command.split("weather ")[-1]
        return get_weather(city_name)
    elif command == "screenshot":
        capture_screenshot()
        return "Screenshot captured."
    elif command == "network speed test":
        return network_speed_test()
    elif command == "webcam test":
        return webcam_test()
    elif command == "microphone test":
        return microphone_test()
    elif command == "speakers test":
        return speakers_test()
    elif command == "display test":
        return display_test()
    elif command == "cpu benchmark":
        return cpu_benchmark()
    elif command == "gpu benchmark":
        return gpu_benchmark()
    else:
        return handle_unrecognized_command(command)

def format_response(response):
    response = re.sub(r'<.*?>', '', response)
    response = unescape(response)
    response = re.sub(r'\*\*(.*?)\*\*', r'\1', response)
    response = re.sub(r'\*(.*?)\*', r'\1', response)
    response = re.sub(r'`(.*?)`', r'\1', response)
    response = re.sub(r'^# (.*?)$', r'\1:', response, flags=re.MULTILINE)
    response = re.sub(r'```[\s\S]*?```', '', response)
    
    return response

def handle_command(user_input):
    response = process_command(user_input)
    formatted_response = format_response(response)
    chat_log.config(state=tk.NORMAL)
    chat_log.insert(tk.END, f"$~You: {user_input}\n", "user")
    chat_log.insert(tk.END, f"$~RuneAI: {formatted_response}\n", "ai")
    chat_log.config(state=tk.DISABLED)
    chat_log.see(tk.END)

def send_message(event=None):
    user_input = chat_input.get()
    chat_input.delete(0, tk.END)
    threading.Thread(target=handle_command, args=(user_input,)).start()

def search_web(query):
    api_key = "AIzaSyDFMewub97IEuO9wSRVzkPSsWlHM4r5tkk"
    cx = "d38be4ab9d14c48e1"
    url = f"https://www.googleapis.com/customsearch/v1?q={query}&key={api_key}&cx={cx}"
    try:
        response = requests.get(url)
        search_results = response.json()
        if 'items' in search_results:
            item = search_results['items'][0]
            title = item['title']
            snippet = item['snippet']
            link = item['link']
            return f"<b>Title:</b> {title}<br><b>Snippet:</b> {snippet}<br><a href='{link}' target='_blank'>Click Here to Open Link</a>"
        else:
            return "No search results found."
    
    except Exception as e:
        return f"Error performing search: {str(e)}"

def download_file(url):
    if url.startswith("http"):
        filename = url.split("/")[-1]
        return download_from_url(url, filename)
    else:
        return "Provided URL is not a valid direct link."

def download_from_url(url, filename):
    try:
        response = requests.get(url, stream=True)
        with open(filename, 'wb') as f:
            f.write(response.content)
        return f"{filename} has been downloaded successfully."
    except Exception as e:
        return f"Error downloading file: {str(e)}"

def uninstall_app(app_name):
    try:
        subprocess.run(["wmic", "product", "where", f"name like '%{app_name}%'", "call", "uninstall"], check=True)
        return f"{app_name} uninstalled successfully."
    except Exception as e:
        return f"Error uninstalling {app_name}: {str(e)}"

def open_resource(resource):
    if resource.startswith("http://") or resource.startswith("https://"):
        webbrowser.open(resource)
        return f"Opened URL: {resource}"
    elif os.path.isfile(resource):
        os.startfile(resource)
        return f"Opened file: {resource}"
    else:
        return handle_application_selection(resource)

def handle_application_selection(app_name):
    common_paths = ["C:\\Program Files", "C:\\Program Files (x86)", "C:\\Windows\\System32"]
    found = False
    for path in common_paths:
        for root, dirs, files in os.walk(path):
            for file in files:
                if app_name.lower() in file.lower() and file.lower().endswith(('.exe', '.bat')):
                    full_path = os.path.join(root, file)
                    subprocess.Popen(full_path)
                    found = True
                    return f"Opened application: {file}"
    if not found:
        return "No matching applications found."

def adjust_volume(level):
    devices = AudioUtilities.GetSpeakers()
    interface = devices.Activate(IAudioEndpointVolume._iid_, CLSCTX_ALL, None)
    volume = cast(interface, POINTER(IAudioEndpointVolume))
    volume.SetMasterVolumeLevelScalar(level / 100.0, None)
    return f"Volume set to {level}%."

def adjust_brightness(level):
    try:
        c = wmi.WMI(namespace='wmi')
        methods = c.WmiMonitorBrightnessMethods()[0]
        methods.WmiSetBrightness(level, 0)
        return f"Brightness adjusted to {level}%."
    except Exception as e:
        return f"Error adjusting brightness: {str(e)}"

def toggle_wifi(state):
    try:
        if state.lower() == "on":
            subprocess.run("netsh interface set interface Wi-Fi admin=enabled", check=True)
            return "Wi-Fi enabled."
        elif state.lower() == "off":
            subprocess.run("netsh interface set interface Wi-Fi admin=disabled", check=True)
            return "Wi-Fi disabled."
        else:
            return "Invalid state. Use 'on' or 'off'."
    except Exception as e:
        return f"Error toggling Wi-Fi: {str(e)}"

def capture_screenshot():
    def on_closing():
        if rect is not None and canvas.bbox("rect") is not None:
            x1 = root.winfo_rootx() + canvas.bbox("rect")[0]
            y1 = root.winfo_rooty() + canvas.bbox("rect")[1]
            x2 = x1 + (canvas.bbox("rect")[2] - canvas.bbox("rect")[0])
            y2 = y1 + (canvas.bbox("rect")[3] - canvas.bbox("rect")[1])
            screenshot = ImageGrab.grab(bbox=(x1, y1, x2, y2))
            save_path = filedialog.asksaveasfilename(defaultextension=".png", filetypes=[("PNG files", "*.png")])
            if save_path:
                screenshot.save(save_path)
                print(f"Screenshot saved to: {save_path}")
        else:
            print("No selection area was made.")
        root.quit()

    def start_selection(event):
        global start_x, start_y
        canvas.delete("rect")
        start_x, start_y = event.x, event.y
        global rect
        rect = None

    def update_selection(event):
        global rect
        cur_x, cur_y = event.x, event.y
        if rect is not None:
            canvas.coords(rect, start_x, start_y, cur_x, cur_y)
        else:
            rect = canvas.create_rectangle(start_x, start_y, cur_x, cur_y, outline="red")

    root = tk.Tk()
    root.title("Screenshot Tool")

    canvas = tk.Canvas(root, width=root.winfo_screenwidth(), height=root.winfo_screenheight())
    canvas.pack()

    root.bind("<ButtonPress-1>", start_selection)
    root.bind("<B1-Motion>", update_selection)
    root.protocol("WM_DELETE_WINDOW", on_closing)

    root.mainloop()

def get_weather(city_name):
    api_key = "453e5312f4f421956d6c9f88b83010c2"
    base_url = "http://api.openweathermap.org/data/2.5/weather?"
    complete_url = base_url + "appid=" + api_key + "&q=" + city_name + "&units=metric"
    response = requests.get(complete_url)
    data = response.json()
    
    if data["cod"] != "404":
        weather_desc = data["weather"][0]["description"]
        temp = data["main"]["temp"]
        pressure = data["main"]["pressure"]
        humidity = data["main"]["humidity"]
        wind_speed = data["wind"]["speed"]
        
        weather_info = (f"Weather in {city_name.capitalize()}:\n"
                        f"Description: {weather_desc}\n"
                        f"Temperature: {temp}°C\n"
                        f"Pressure: {pressure} hPa\n"
                        f"Humidity: {humidity}%\n"
                        f"Wind Speed: {wind_speed} m/s")
        return weather_info
    else:
        return f"City {city_name} not found."

# New Test Features
def network_speed_test():
    try:
        st = speedtest.Speedtest()
        download_speed = st.download() / 1_000_000  # Convert to Mbps
        upload_speed = st.upload() / 1_000_000      # Convert to Mbps
        return f"Download Speed: {download_speed:.2f} Mbps\nUpload Speed: {upload_speed:.2f} Mbps"
    except Exception as e:
        return f"Error performing network speed test: {str(e)}"

def webcam_test():
    try:
        cap = cv2.VideoCapture(0)
        if not cap.isOpened():
            return "Webcam not found."

        ret, frame = cap.read()
        cap.release()

        if ret:
            cv2.imshow("Webcam Test", frame)
            cv2.waitKey(0)
            cv2.destroyAllWindows()
            return "Webcam is working."
        else:
            return "Webcam test failed."
    except Exception as e:
        return f"Error performing webcam test: {str(e)}"

def microphone_test():
    try:
        duration = 5  # seconds
        fs = 44100  # Sample rate
        print("Recording...")
        recording = sd.rec(int(duration * fs), samplerate=fs, channels=2)
        sd.wait()  # Wait until recording is finished
        print("Recording finished. Playing back...")
        sd.play(recording, fs)
        sd.wait()  # Wait until playback is finished
        return "Microphone test completed."
    except Exception as e:
        return f"Error performing microphone test: {str(e)}"

def speakers_test():
    try:
        frequency = 440  # Our played note will be 440 Hz
        fs = 44100  # 44100 samples per second
        seconds = 5  # Note duration of 5 seconds
        t = np.linspace(0, seconds, seconds * fs, False)
        note = np.sin(frequency * t * 2 * np.pi)
        audio = note * (2**15 - 1) / np.max(np.abs(note))
        audio = audio.astype(np.int16)
        print("Playing test tone...")
        sd.play(audio, fs)
        sd.wait()  # Wait until the file is done playing
        return "Speakers test completed."
    except Exception as e:
        return f"Error performing speakers test: {str(e)}"

def display_test():
    try:
        colors = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (255, 255, 255), (0, 0, 0)]
        for color in colors:
            img = np.zeros((500, 500, 3), dtype=np.uint8)
            img[:, :] = color
            cv2.imshow(f'Display Test - {color}', img)
            cv2.waitKey(1000)
        cv2.destroyAllWindows()
        return "Display test completed."
    except Exception as e:
        return f"Error performing display test: {str(e)}"

def cpu_benchmark():
    try:
        cpu_info = {
            "Physical Cores": psutil.cpu_count(logical=False),
            "Total Cores": psutil.cpu_count(logical=True),
            "Max Frequency": psutil.cpu_freq().max,
            "Current Frequency": psutil.cpu_freq().current,
            "CPU Usage": psutil.cpu_percent(interval=1)
        }
        benchmark_result = "\n".join([f"{k}: {v}" for k, v in cpu_info.items()])
        return f"CPU Benchmark Results:\n{benchmark_result}"
    except Exception as e:
        return f"Error performing CPU benchmark: {str(e)}"

def gpu_benchmark():
    try:
        gpus = GPUtil.getGPUs()
        if not gpus:
            return "No GPU found."
        gpu_info = {
            "GPU Name": gpus[0].name,
            "GPU Load": gpus[0].load * 100,
            "GPU Memory Free": gpus[0].memoryFree,
            "GPU Memory Used": gpus[0].memoryUsed,
            "GPU Temperature": gpus[0].temperature
        }
        benchmark_result = "\n".join([f"{k}: {v}" for k, v in gpu_info.items()])
        return f"GPU Benchmark Results:\n{benchmark_result}"
    except Exception as e:
        return f"Error performing GPU benchmark: {str(e)}"

# Set up UI
root = ctk.CTk()
root.geometry("700x500")
root.title("System Controller")

# Command log
chat_log = ctk.CTkTextbox(root, width=650, height=300)
chat_log.pack(pady=10)
chat_log.insert(tk.END, "$~Welcome to System Controller.\nType your command or chat with AI.\n\n", "welcome")
chat_log.configure(state=tk.DISABLED)

# Command input
chat_input = ctk.CTkEntry(root, width=650)
chat_input.pack(pady=10)
chat_input.bind("<Return>", send_message)

# Available commands text
commands_text = """Available Commands:
- Download <URL>
- Search <query>
- Uninstall <application_name>
- Open <resource>
- Volume <level>
- Brightness <level>
- Wifi <on/off>
- Weather <city_name>
- Screenshot
- Network speed test
- Webcam test
- Microphone test
- Speakers test
- Display test
- CPU benchmark
- GPU benchmark
"""

commands_label = ctk.CTkLabel(root, text=commands_text, anchor="w", justify="left")
commands_label.pack(pady=10)

root.mainloop()
